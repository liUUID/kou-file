server:
  port: 8081
  undertow:
    threads:
      io: 8
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 256
    buffer-size: 1024
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    direct-buffers: true
spring:
  application:
    name: kou-file
  profiles:
    active: dev
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    encoding: UTF-8
    mode: HTML

mybatis-plus:
  mapper-locations: classpath:/mapper/*Mapper.xml
  typeAliasesPackage: com.free.fs.model
  global-config:
    db-config:
      id-type: auto
      field-strategy: NOT_NULL
      logic-delete-value: 1
      logic-not-delete-value: 0
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false

fs:
  #多租户应用隔离配置
  tenant:
    enable: true
    ignoreTables:
      - sys_user
      - sys_user_role
      - sys_role_permission
      - sys_role
      - sys_permission

  # 云存储配置
  files-server:
    type: local
    local:
      # 文件上传地址, 这里的意思就是本地模式下，上传的文件会保存到 `uploadPath`路径里，然后通过 `uploadMapping` 映射
      # 通俗点就是 E:/upload/xxx.jpg 会映射到 http://localhost:8081/uploads/xxx.jpg
      uploadDir: /data/kou-file/upload/
      uploadMapping: /uploads
      # 生产环境请填写公网地址或者域名，如果不写，默认http://127.0.0.1:8081/
      #domain: https://fs.elites.ink
    #如配置七牛，需在QiniuAutoConfigure.java配置类中指定自己的七牛云机房区域
    qiniu:
      accessKey: xxxxxxxxxxxxxxxxxxx
      secretKey: xxxxxxxxxxxxxxxxxxx
      bucket: xxxxxxxxxxxxxxxxxxx
      path: xxxxxxxxxxxxxxxxxxx
    #oss配置
    oss:
      accessKey: xxxxxxxxxxxxxxxxxxx
      secretKey: xxxxxxxxxxxxxxxxxxx
      endpoint: xxxxxxxxxxxxxxxxxxx
      bucket: xxxxxxxxxxxxxxxxxxx
      path: xxxxxxxxxxxxxxxxxxx
    minio:
      accessKey: xxxxxxxxxxxxxxxxxxx
      secretKey: xxxxxxxxxxxxxxxxxxx
      endpoint: xxxxxxxxxxxxxxxxxxx
      bucket: xxxxxxxxxxxxxxxxxxx
      path: xxxxxxxxxxxxxxxxxxx
# 第三方登录配置
justauth:
  enabled: true
  type:
    GITEE:
      client-id: 9430a180ea8axxxxxxxxxxxxxxxxxxxxxx07c38d22be88xxxxxxdfb8c
      client-secret: b10aexxxxxxe2c16b50b56869460741f04xxxxxxxxxxxxxxxxxxxdb409ee
      redirect-uri: http://xxxxxxxx/oauth/callback/gitee
    GITHUB:
      client-id: ea6f9xxxxxx03f5b0fd
      client-secret: c60524386xxxxxx9cbef3caa7cxxxxxxxxxxe71474d
      redirect-uri: http://xxxxxx/oauth/callback/github

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: kou-file-token
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 86400
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: 3600
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否输出操作日志
  is-log: true